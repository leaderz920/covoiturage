rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Fonction pour vérifier si l'utilisateur est admin
    function isAdmin() {
      // Vérifie si l'utilisateur est authentifié et a le champ isAdmin=true
      return request.auth != null && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // Règles pour la collection "announcements"
    match /announcements/{announcementId} {
      allow read: if true;
      allow write: if request.auth != null;
    }
    
    // Règles pour la collection "users"
    match /users/{userId} {
      // Permettre à un utilisateur de lire et modifier uniquement ses propres données
      // ou à un administrateur d'accéder à tout
      allow read, update, delete: if isAdmin() || (request.auth != null && request.auth.uid == userId);
      
      // Autoriser la création pour les utilisateurs authentifiés
      allow create: if request.auth != null;
    }
    
    // Permettre aux administrateurs de lister tous les utilisateurs
    match /users {
        allow list: if isAdmin();
    }
    
    // Règles pour les opérations d'administration
    match /tokenOperations/{document=**} {
      allow read, write: if isAdmin();
    }
    
    // Journal des actions administratives
    match /adminLogs/{logId} {
      allow read, write: if isAdmin();
    }

    // Règles pour la collection "subscriptions"
    match /subscriptions/{subscriptionId} {
      // Le serveur (Admin SDK) a besoin de lister les tokens.
      // On autorise la lecture pour tous les utilisateurs authentifiés pour que le serveur puisse lire.
      // Note: Le SDK Admin contourne ces règles, mais en cas de problème d'init,
      // cela peut servir de fallback. La vraie solution est de s'assurer que le SDK Admin est bien utilisé.
      // Pour une sécurité plus stricte, on pourrait utiliser des fonctions Cloud authentifiées.
      allow list, read: if request.auth != null || isAdmin();

      // Seuls les utilisateurs authentifiés peuvent créer/supprimer leurs propres abonnements
      allow create: if request.auth != null;
      allow delete: if request.auth != null && resource.data.userId == request.auth.uid;
      
      // Les administrateurs peuvent tout faire
      allow write: if isAdmin();
    }
    
    // Règles pour la collection "notificationLogs"
    match /notificationLogs/{logId} {
      allow read, write: if isAdmin();
    }
  }
}