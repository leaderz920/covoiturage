import { 
  collection, 
  addDoc, 
  getDocs, 
  query, 
  where, 
  doc, 
  deleteDoc, 
  getDoc,
  serverTimestamp,
  updateDoc,
  orderBy,
  limit,
  QueryConstraint,
  getDocsFromCache,
  getDocsFromServer,
  getDocFromCache,
  enableNetwork,
  disableNetwork,
  writeBatch,
  Timestamp
} from 'firebase/firestore';
import { db, auth } from '@/lib/firebase';
import { AnnouncementType } from '@/types';
import { withFirestoreLock, FirestoreOperations } from '@/utils/firestoreLock';
import { notifyNewAnnouncement, notifyPublishSuccess } from '@/lib/localNotifications';

const COLLECTION_NAME = 'announcements';

// Cr√©er une nouvelle annonce avec v√©rification de connectivit√©
export const createAnnouncement = async (announcement: Omit<AnnouncementType, 'id' | 'createdAt'>) => {
  try {
    // V√©rifier la connectivit√©
    if (!isOnline()) {
      throw new Error('Impossible de cr√©er une annonce en mode hors ligne. Veuillez vous connecter √† internet.');
    }
    
    // S'assurer que l'ID utilisateur est pr√©sent
    if (!announcement.userId && auth.currentUser) {
      console.log('[FIRESTORE DEBUG] Ajout automatique de l\'ID utilisateur:', auth.currentUser.uid);
      announcement.userId = auth.currentUser.uid;
      
      // Ajouter √©galement le nom d'utilisateur et la photo si disponibles
      if (!announcement.userName && auth.currentUser.displayName) {
        announcement.userName = auth.currentUser.displayName;
      }
      
      if (!announcement.userPhoto && auth.currentUser.photoURL) {
        announcement.userPhoto = auth.currentUser.photoURL;
      }
    }
    
    if (!announcement.userId) {
      console.error('[FIRESTORE DEBUG] ERREUR: Tentative de cr√©ation d\'annonce sans ID utilisateur!');
    }
    
    // Log pour le d√©bogage des champs de v√©hicule
    console.log('[FIRESTORE DEBUG] Donn√©es d\'annonce avant cr√©ation:', JSON.stringify(announcement));
    console.log('[FIRESTORE DEBUG] Photo du v√©hicule pr√©sente:', !!announcement.vehiclePhoto);
    console.log('[FIRESTORE DEBUG] ID utilisateur inclus:', announcement.userId);
    console.log('[FIRESTORE DEBUG] Infos suppl√©mentaires pr√©sentes:', !!announcement.additionalInfo);
    console.log('[FIRESTORE DEBUG] Contenu des infos suppl√©mentaires:', announcement.additionalInfo);
    
    // Cr√©er une copie de l'annonce pour la nettoyer
    const cleanedAnnouncement = { ...announcement };
    
    // Supprimer le champ additionalInfo s'il est vide ou undefined
    if (cleanedAnnouncement.additionalInfo === undefined || cleanedAnnouncement.additionalInfo === '') {
      delete cleanedAnnouncement.additionalInfo;
    }
    
    const docRef = await addDoc(collection(db, COLLECTION_NAME), {
      ...cleanedAnnouncement,
      createdAt: serverTimestamp()
    });
    
    // Log pour confirmation de la cr√©ation
    console.log('[FIRESTORE DEBUG] Annonce cr√©√©e avec ID:', docRef.id);
    
    // üöÄ NOTIFICATIONS LOCALES DIRECTES (sans serveur)
    try {
      console.log('[NOTIFICATION] D√©clenchement notifications locales pour nouvelle annonce:', docRef.id);
      
      // Notification de succ√®s de publication pour l'utilisateur
      await notifyPublishSuccess({
        type: announcement.type,
        from: announcement.from,
        to: announcement.to
      });
      
      // Notification g√©n√©rale pour informer qu'une nouvelle annonce est disponible
      await notifyNewAnnouncement({
        id: docRef.id,
        type: announcement.type,
        from: announcement.from,
        to: announcement.to,
        userName: announcement.userName || 'Un utilisateur'
      });
      
      console.log('[NOTIFICATION] Notifications locales envoy√©es avec succ√®s');
    } catch (notificationError) {
      console.warn('[NOTIFICATION] Erreur lors de l\'affichage des notifications locales:', notificationError);
      // Non bloquant - l'annonce est cr√©√©e m√™me si la notification √©choue
    }
    
    // Mettre √† jour les jetons de l'utilisateur
    // Cette op√©ration devrait normalement √™tre effectu√©e dans une fonction Cloud
    
    // R√©cup√©rer le document fraichement cr√©√© pour avoir toutes les donn√©es (incluant les timestamp)
    let newDocSnapshot;
    try {
      newDocSnapshot = await getDocFromCache(docRef);
      console.log('[FIRESTORE DEBUG] Document r√©cup√©r√© depuis le cache');
    } catch (error) {
      newDocSnapshot = await getDoc(docRef);
      console.log('[FIRESTORE DEBUG] Document r√©cup√©r√© depuis le serveur');
    }
    
    if (!newDocSnapshot.exists()) {
      throw new Error('Le document nouvellement cr√©√© n\'a pas pu √™tre r√©cup√©r√©');
    }
    
    // Retourner l'objet complet plut√¥t que seulement l'ID
    return {
      id: docRef.id,
      ...newDocSnapshot.data(),
      ...announcement // Assurer que toutes les donn√©es sont pr√©sentes, m√™me si serverTimestamp n'est pas encore r√©solu
    } as AnnouncementType;
  } catch (error) {
    console.error('Erreur lors de la cr√©ation de l\'annonce:', error);
    throw error;
  }
};

// V√©rifier la connectivit√© r√©seau
export const isOnline = (): boolean => {
  return typeof navigator !== 'undefined' && navigator.onLine;
};

// Activer le mode hors ligne
export const goOffline = async (): Promise<void> => {
  try {
    await disableNetwork(db);
    console.log('Mode hors ligne activ√©');
  } catch (error) {
    console.error('Erreur lors du passage en mode hors ligne:', error);
  }
};

// Activer le mode en ligne
export const goOnline = async (): Promise<void> => {
  try {
    await enableNetwork(db);
    console.log('Mode en ligne activ√©');
  } catch (error) {
    console.error('Erreur lors du passage en mode en ligne:', error);
  }
};

// R√©cup√©rer toutes les annonces avec strat√©gie de cache
export const getAllAnnouncements = async (): Promise<AnnouncementType[]> => {
  // Utiliser l'utilitaire de verrouillage pour √©viter les conflits
  return withFirestoreLock(FirestoreOperations.GET_ALL_ANNOUNCEMENTS, async () => {
    let retryCount = 0;
    const MAX_RETRIES = 3;
    
    const attemptGetAnnouncements = async (): Promise<AnnouncementType[]> => {
      try {
        console.log('[FIRESTORE DEBUG] D√©but de la r√©cup√©ration des annonces');
        
        const q = query(
          collection(db, COLLECTION_NAME), 
          orderBy('createdAt', 'desc')
        );
        
        let querySnapshot;
        
        // Utiliser getDocs standard plut√¥t que getDocsFromServer pour √©viter les erreurs 'already-exists'
        try {
          console.log(`[FIRESTORE DEBUG] Tentative de r√©cup√©ration des annonces avec getDocs (essai ${retryCount + 1}/${MAX_RETRIES + 1})`);
          querySnapshot = await getDocs(q);
          console.log('[FIRESTORE DEBUG] Annonces r√©cup√©r√©es avec succ√®s:', querySnapshot.docs.length);
        } catch (error: any) {
          if (error.code === 'already-exists' && retryCount < MAX_RETRIES) {
            retryCount++;
            console.warn(`[FIRESTORE DEBUG] Erreur 'already-exists' d√©tect√©e, nouvelle tentative ${retryCount}/${MAX_RETRIES} dans ${500 * retryCount}ms...`);
            await new Promise(resolve => setTimeout(resolve, 500 * retryCount));
            return attemptGetAnnouncements();
          }
          console.error('[FIRESTORE DEBUG] Erreur avec getDocs:', JSON.stringify(error));
          throw error;
        }
        
        // Transformer les donn√©es pour r√©cup√©rer correctement toutes les informations
        const announcements = querySnapshot.docs.map(doc => {
          const data = doc.data();
          
          // Construction de l'annonce avec toutes les informations
          const announcement: AnnouncementType = {
            id: doc.id,
            type: data.type,
            from: data.from,
            to: data.to,
            date: data.date,
            time: data.time,
            price: data.price,
            seats: data.seats,
            userId: data.userId,
            createdAt: data.createdAt,
            vehicleType: data.vehicleType || (data.type === 'driver' ? ['V√©hicule non sp√©cifi√©'] : ['Sans v√©hicule']),
            vehiclePhoto: data.vehiclePhoto,
            vehiclePhotoUrl: data.vehiclePhotoUrl, // S'assurer que l'URL de la photo est incluse
            // Corriger la gestion du num√©ro de t√©l√©phone (support des deux formats)
            phone: data.phone || data.phoneNumber || '',
            // Conserver les informations utilisateur telles qu'elles sont dans la base
            userName: data.userName || 'Utilisateur',
            userPhoto: data.userPhoto || '/images/default-avatar.png',
            // Ajouter les d√©tails suppl√©mentaires s'ils existent
            additionalInfo: data.additionalInfo || ''
          };
          
          return announcement;
        });
        
        console.log('[FIRESTORE DEBUG] Total des annonces r√©cup√©r√©es:', announcements.length);
        return announcements;
      } catch (error) {
        console.error('Erreur lors de la r√©cup√©ration des annonces:', JSON.stringify(error));
        throw error;
      }
    };
    
    return attemptGetAnnouncements();
  });
};

// R√©cup√©rer les annonces d'un utilisateur avec strat√©gie de cache
export const getUserAnnouncements = async (userId: string): Promise<AnnouncementType[]> => {
  console.log('[DEBUG] getUserAnnouncements appel√© avec userId:', userId);
  
  if (!userId) {
    console.warn('[DEBUG] Aucun userId fourni, retour d\'un tableau vide');
    return [];
  }
  
  // Utiliser l'utilitaire de verrouillage avec un identifiant unique incluant l'ID utilisateur
  const lockId = `${FirestoreOperations.GET_USER_ANNOUNCEMENTS}_${userId}`;
  
  return withFirestoreLock(lockId, async () => {
    let retryCount = 0;
    const MAX_RETRIES = 3;
    
    const attemptGetUserAnnouncements = async (): Promise<AnnouncementType[]> => {
      try {
        console.log(`[DEBUG] Tentative de r√©cup√©ration des annonces pour l'utilisateur: ${userId}`);
        
        // Temporairement sans orderBy pour √©viter l'erreur d'index
        // L'index sera cr√©√© manuellement dans Firebase Console
        const q = query(
          collection(db, COLLECTION_NAME), 
          where('userId', '==', userId)
        );
        
        let querySnapshot;
        
        // Utiliser getDocs standard pour √©viter les erreurs 'already-exists'
        try {
          console.log(`[FIRESTORE DEBUG] Tentative de r√©cup√©ration des annonces utilisateur avec getDocs (essai ${retryCount + 1}/${MAX_RETRIES + 1})`);
          querySnapshot = await getDocs(q);
          console.log('[FIRESTORE DEBUG] Annonces utilisateur r√©cup√©r√©es avec succ√®s:', querySnapshot.docs.length);
          console.log('[DEBUG] Premi√®re annonce brute (si disponible):', querySnapshot.docs[0]?.data());
        } catch (error: any) {
          console.error('[DEBUG] Erreur lors de la r√©cup√©ration des annonces:', error);
          if (error.code === 'already-exists' && retryCount < MAX_RETRIES) {
            retryCount++;
            console.warn(`[FIRESTORE DEBUG] Erreur 'already-exists' d√©tect√©e, nouvelle tentative ${retryCount}/${MAX_RETRIES} dans ${500 * retryCount}ms...`);
            await new Promise(resolve => setTimeout(resolve, 500 * retryCount));
            return attemptGetUserAnnouncements();
          }
          console.error('[FIRESTORE DEBUG] Erreur lors de la r√©cup√©ration des annonces utilisateur:', JSON.stringify(error));
          throw error;
        }
        
        // Traiter correctement les donn√©es Firestore, notamment les timestamps
        const announcements = querySnapshot.docs.map(doc => {
          const data = doc.data();
          console.log('[DEBUG] Donn√©es brutes de l\'annonce:', { id: doc.id, ...data });
          
          // Convertir les timestamps Firestore en objets Date JavaScript
          const formattedData: any = { ...data };
          
          // Traitement de la date de l'annonce
          if (data.date && typeof data.date === 'object' && 'seconds' in data.date) {
            formattedData.date = new Date(data.date.seconds * 1000);
          } else if (data.date) {
            formattedData.date = new Date(data.date);
          }
          
          // Traitement de la date de cr√©ation
          if (data.createdAt && typeof data.createdAt === 'object' && 'seconds' in data.createdAt) {
            formattedData.createdAt = new Date(data.createdAt.seconds * 1000);
          } else if (data.createdAt) {
            formattedData.createdAt = new Date(data.createdAt);
          }
          
          return {
            id: doc.id,
            ...formattedData
          } as AnnouncementType;
        });
        
        // Trier les annonces c√¥t√© client par createdAt (du plus r√©cent au plus ancien)
        announcements.sort((a, b) => {
          if (!a.createdAt || !b.createdAt) return 0;
          return b.createdAt.getTime() - a.createdAt.getTime();
        });
        
        console.log('[DEBUG] Annonces format√©es et tri√©es:', announcements);
        return announcements;
      } catch (error) {
        console.error('Erreur lors de la r√©cup√©ration des annonces de l\'utilisateur:', JSON.stringify(error));
        throw error;
      }
    };
    
    return attemptGetUserAnnouncements();
  });
};

// Rechercher des annonces avec strat√©gie de cache
export const searchAnnouncements = async (
  searchParams: {
    type?: 'driver' | 'passenger';
    from?: string;
    to?: string;
    date?: Date;
  }
): Promise<AnnouncementType[]> => {
  // G√©n√©rer un identifiant unique bas√© sur les param√®tres de recherche
  const searchParamsKey = JSON.stringify(searchParams);
  const lockId = `${FirestoreOperations.SEARCH_ANNOUNCEMENTS}_${searchParamsKey.substring(0, 50)}`;
  
  return withFirestoreLock(lockId, async () => {
    let retryCount = 0;
    const MAX_RETRIES = 3;
    
    const attemptSearchAnnouncements = async (): Promise<AnnouncementType[]> => {
      try {
      const q = collection(db, COLLECTION_NAME);
        
        // Construire la requ√™te en fonction des param√®tres
      const queryConstraints: QueryConstraint[] = [];
        
        if (searchParams.type) {
          queryConstraints.push(where('type', '==', searchParams.type));
        }
        
        if (searchParams.from) {
          queryConstraints.push(where('from', '>=', searchParams.from));
          queryConstraints.push(where('from', '<=', searchParams.from + '\uf8ff'));
        }
        
        if (searchParams.to) {
          queryConstraints.push(where('to', '>=', searchParams.to));
          queryConstraints.push(where('to', '<=', searchParams.to + '\uf8ff'));
        }
        
        if (searchParams.date) {
          queryConstraints.push(where('date', '==', searchParams.date));
        }
        
        // Toujours ajouter orderBy et limit
        queryConstraints.push(orderBy('createdAt', 'desc'));
        queryConstraints.push(limit(20));
        
        const finalQuery = query(q, ...queryConstraints);
        
        let querySnapshot;
        
        // Remplacer la strat√©gie de cache/server par une approche plus robuste avec retry
        try {
          console.log(`[FIRESTORE DEBUG] Tentative de recherche d'annonces (essai ${retryCount + 1}/${MAX_RETRIES + 1})`);
          querySnapshot = await getDocs(finalQuery);
          console.log('[FIRESTORE DEBUG] R√©sultats de recherche r√©cup√©r√©s avec succ√®s:', querySnapshot.docs.length);
        } catch (error: any) {
          if (error.code === 'already-exists' && retryCount < MAX_RETRIES) {
            retryCount++;
            console.warn(`[FIRESTORE DEBUG] Erreur 'already-exists' d√©tect√©e, nouvelle tentative ${retryCount}/${MAX_RETRIES} dans ${500 * retryCount}ms...`);
            await new Promise(resolve => setTimeout(resolve, 500 * retryCount));
            return attemptSearchAnnouncements();
          }
          console.error('[FIRESTORE DEBUG] Erreur lors de la recherche d\'annonces:', JSON.stringify(error));
          throw error;
        }
        
        // Traiter et retourner les r√©sultats
        return querySnapshot.docs.map(doc => {
          const data = doc.data();
          return {
            id: doc.id,
            ...data
          } as AnnouncementType;
        });
      } catch (error) {
        console.error('Erreur lors de la recherche d\'annonces:', JSON.stringify(error));
        throw error;
      }
    };
    
    return attemptSearchAnnouncements();
  });
};

// Supprimer une annonce avec v√©rification de connectivit√©
export const deleteAnnouncement = async (announcementId: string): Promise<void> => {
  try {
    if (!isOnline()) {
      throw new Error('Impossible de supprimer une annonce en mode hors ligne');
    }
    await deleteDoc(doc(db, COLLECTION_NAME, announcementId));
  } catch (error) {
    console.error('Erreur lors de la suppression de l\'annonce:', error);
    throw error;
  }
};

// Mettre √† jour une annonce existante
export const updateAnnouncement = async (id: string, announcementData: any): Promise<AnnouncementType> => {
  try {
    // R√©cup√©rer une r√©f√©rence au document √† mettre √† jour
    const announcementRef = doc(db, COLLECTION_NAME, id);
    
    // Supprimer le champ id car Firestore g√®re cette propri√©t√© s√©par√©ment
    const { id: _, ...dataToUpdate } = announcementData;
    
    // Cr√©er un nouvel objet pour stocker les donn√©es nettoy√©es
    const cleanedData: Record<string, any> = {};
    
    // Nettoyer les donn√©es avant la mise √† jour
    Object.keys(dataToUpdate).forEach(key => {
      // Ne pas inclure les champs undefined ou cha√Ænes vides (sauf pour les champs qui peuvent √™tre vides)
      if (dataToUpdate[key] !== undefined && dataToUpdate[key] !== '') {
        // Convertir vehicleType en tableau si n√©cessaire
        if (key === 'vehicleType' && !Array.isArray(dataToUpdate[key])) {
          cleanedData[key] = dataToUpdate[key] ? [dataToUpdate[key]] : [];
        } else {
          cleanedData[key] = dataToUpdate[key];
        }
      }
    });
    
    // Ajouter une date de mise √† jour
    cleanedData.updatedAt = new Date();
    
    // Log pour le d√©bogage des champs lors de la mise √† jour
    console.log('[FIRESTORE DEBUG] Donn√©es d\'annonce avant mise √† jour:', JSON.stringify(cleanedData));
    console.log('[FIRESTORE DEBUG] Infos suppl√©mentaires pr√©sentes:', !!cleanedData.additionalInfo);
    console.log('[FIRESTORE DEBUG] Contenu des infos suppl√©mentaires:', cleanedData.additionalInfo);
    
    // Mettre √† jour le document avec les donn√©es nettoy√©es
    await updateDoc(announcementRef, cleanedData);
    
    // R√©cup√©rer l'annonce mise √† jour
    const updatedDoc = await getDoc(announcementRef);
    
    if (!updatedDoc.exists()) {
      throw new Error('L\'annonce mise √† jour n\'a pas √©t√© trouv√©e');
    }
    
    return {
      id: updatedDoc.id,
      ...updatedDoc.data()
    } as AnnouncementType;
  } catch (error) {
    console.error('Erreur lors de la mise √† jour de l\'annonce:', error);
    throw error;
  }
};
